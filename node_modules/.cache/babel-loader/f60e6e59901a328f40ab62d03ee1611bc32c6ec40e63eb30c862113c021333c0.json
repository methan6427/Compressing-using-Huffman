{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\methan\\\\WebstormProjects\\\\Compressing-using-Huffman\\\\src\\\\huffman\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FileText, Upload, Download, BarChart2, List } from 'lucide-react';\nimport './App.css';\n\n// Utility function to convert unsigned byte to integer\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst unsignedToBytes = a => {\n  return a & 0xFF;\n};\n\n// Huffman node class\nclass HeapEntry {\n  constructor(ascii = 0, repetition = 0) {\n    this.ascii = ascii;\n    this.repetition = repetition;\n    this.left = null;\n    this.right = null;\n  }\n  isLeaf() {\n    return this.left === null && this.right === null;\n  }\n  compareTo(other) {\n    return this.repetition - other.repetition;\n  }\n}\n\n// Huffman code class for table\nclass Huffman {\n  constructor(ascii = 0, huffman = \"\", repetition = 0, length = 0) {\n    this.ascii = ascii;\n    this.huffman = huffman;\n    this.repetition = repetition;\n    this.length = length;\n  }\n}\n\n// MinHeap implementation\nclass MinHeap {\n  constructor(size) {\n    this.tableSize = size + 1;\n    this.currentSize = 0;\n    this.heapTable = new Array(this.tableSize).fill(null);\n  }\n  add(newEntry) {\n    if (this.tableSize - this.currentSize === 1) {\n      console.log(\"Heap is full\");\n      return false;\n    }\n    this.currentSize++;\n    this.heapTable[this.currentSize] = newEntry;\n    this.swim(this.currentSize);\n    return true;\n  }\n  removeMin() {\n    if (!this.isEmpty()) {\n      const min = this.heapTable[1];\n      this.exchange(1, this.currentSize);\n      this.currentSize--;\n      this.sink(1);\n      this.heapTable[this.currentSize + 1] = null;\n      return min;\n    }\n    return null;\n  }\n  getMin() {\n    if (!this.isEmpty()) {\n      return this.heapTable[1];\n    }\n    return null;\n  }\n  isEmpty() {\n    return this.currentSize === 0;\n  }\n  getSize() {\n    return this.currentSize;\n  }\n  clear() {\n    this.currentSize = 0;\n  }\n  swim(k) {\n    while (k > 1 && !this.firstArgIsLess(Math.floor(k / 2), k)) {\n      this.exchange(Math.floor(k / 2), k);\n      k = Math.floor(k / 2);\n    }\n  }\n  sink(k) {\n    while (2 * k <= this.currentSize) {\n      let j = 2 * k;\n      if (j < this.currentSize && !this.firstArgIsLess(j, j + 1)) {\n        j++;\n      }\n      if (this.firstArgIsLess(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n  firstArgIsLess(k1, k2) {\n    return this.heapTable[k1].compareTo(this.heapTable[k2]) < 0;\n  }\n  exchange(k1, k2) {\n    const temp = this.heapTable[k1];\n    this.heapTable[k1] = this.heapTable[k2];\n    this.heapTable[k2] = temp;\n  }\n}\n\n// Table component to display huffman codes\nconst HuffmanTable = ({\n  table\n}) => {\n  const filteredTable = table.filter(entry => entry !== null && entry.repetition > 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ASCII (Char)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Huffman Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Repetition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Code Length\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredTable.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [entry.ascii, \" (\", String.fromCharCode(entry.ascii), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"code\",\n            children: entry.huffman\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-right\",\n            children: entry.repetition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-right\",\n            children: entry.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 7\n  }, this);\n};\n\n// Header info modal\n_c = HuffmanTable;\nconst HeaderInfoModal = ({\n  headerList,\n  isOpen,\n  onClose\n}) => {\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"modal-title\",\n        children: \"Header Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: headerList.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Header size: \", headerList.length, \" bytes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"header-list\",\n            children: headerList.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"modal-button\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 7\n  }, this);\n};\n\n// Format file size\n/*const formatFileSize = (bytes) => {\r\n  if (bytes < 1024) return `${bytes} bytes`;\r\n  else if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;\r\n  else return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;\r\n};\r\n*/\n_c2 = HeaderInfoModal;\nconst formatFileSize = bytes => {\n  const formattedBytes = bytes.toLocaleString(); // Add commas for readability\n\n  if (bytes < 1024) {\n    return `${formattedBytes} bytes`;\n  } else if (bytes < 1024 * 1024) {\n    const kb = Math.floor(bytes / 1024);\n    return `${formattedBytes} bytes (${kb} KB)`;\n  } else {\n    const mb = Math.floor(bytes / (1024 * 1024));\n    return `${formattedBytes} bytes (${mb} MB)`;\n  }\n};\n// Main component\nconst App = () => {\n  _s();\n  var _file$name;\n  const [file, setFile] = useState(null);\n  const [fileSize, setFileSize] = useState(0);\n  const [outputMessage, setOutputMessage] = useState(\"\");\n  const [huffmanTable, setHuffmanTable] = useState([]);\n  const [compressionStats, setCompressionStats] = useState(\"\");\n  const [headerList, setHeaderList] = useState([]);\n  const [showHeaderModal, setShowHeaderModal] = useState(false);\n  const [isCompressing, setIsCompressing] = useState(false);\n  const [isDecompressing, setIsDecompressing] = useState(false);\n  useEffect(() => {\n    document.title = \"Huffman Compresser\";\n  }, []);\n  // Create Huffman tree and codes\n  const createHuffmanTree = async fileData => {\n    const frequencyArray = new Array(256).fill(0);\n    for (let i = 0; i < fileData.length; i++) {\n      const byteValue = unsignedToBytes(fileData[i]);\n      frequencyArray[byteValue]++;\n    }\n    const heap = new MinHeap(257);\n    let size = 0;\n    for (let i = 0; i < frequencyArray.length; i++) {\n      if (frequencyArray[i] !== 0) {\n        heap.add(new HeapEntry(i, frequencyArray[i]));\n        size++;\n      }\n    }\n    for (let i = 1; i < size; i++) {\n      const z = new HeapEntry();\n      const a = heap.removeMin();\n      const b = heap.removeMin();\n      z.left = a;\n      z.right = b;\n      z.repetition = a.repetition + b.repetition;\n      heap.add(z);\n    }\n    const root = heap.getMin();\n    const table = new Array(256).fill(null);\n    const traversal = (node, code, huffmanTable) => {\n      if (!node) return;\n      if (!node.isLeaf()) {\n        traversal(node.left, code + '0', huffmanTable);\n        traversal(node.right, code + '1', huffmanTable);\n      } else {\n        huffmanTable[node.ascii] = new Huffman(node.ascii, code, node.repetition, code.length);\n      }\n    };\n    traversal(root, \"\", table);\n    return {\n      table,\n      root\n    };\n  };\n\n  // Compress file\n  const compressFile = async (fileData, huffmanTable, root) => {\n    const listBinary = [];\n    const finalList = [];\n    const createHeader = node => {\n      if (!node) return;\n      if (node.isLeaf()) {\n        listBinary.push(1);\n        finalList.push(node.ascii);\n        return;\n      }\n      listBinary.push(0);\n      createHeader(node.left);\n      createHeader(node.right);\n    };\n    createHeader(root);\n    const headerList = [];\n    const fileName = file.name;\n    const fileExt = fileName.substring(fileName.lastIndexOf('.'));\n    headerList.push(fileExt.length);\n    for (let i = 0; i < fileExt.length; i++) {\n      headerList.push(fileExt.charCodeAt(i));\n    }\n    let treeBits = listBinary.join('');\n    while (treeBits.length % 8 !== 0) {\n      treeBits += '0';\n    }\n    const treeByteCount = treeBits.length / 8;\n    headerList.push(treeByteCount >> 8, treeByteCount & 0xFF);\n    for (let i = 0; i < treeBits.length; i += 8) {\n      const byte = treeBits.substr(i, 8);\n      headerList.push(parseInt(byte, 2));\n    }\n    headerList.push(finalList.length >> 8, finalList.length & 0xFF);\n    headerList.push(...finalList);\n    let compressedBits = '';\n    for (let i = 0; i < fileData.length; i++) {\n      const value = unsignedToBytes(fileData[i]);\n      compressedBits += huffmanTable[value].huffman;\n    }\n    const paddingBits = (8 - compressedBits.length % 8) % 8;\n    compressedBits += '0'.repeat(paddingBits);\n    const compressedBytes = [];\n    for (let i = 0; i < compressedBits.length; i += 8) {\n      const byte = compressedBits.substr(i, 8);\n      compressedBytes.push(parseInt(byte, 2));\n    }\n    compressedBytes.push(paddingBits);\n    const finalData = new Uint8Array([...headerList, ...compressedBytes]);\n    const originalSize = fileData.length;\n    const compressedSize = finalData.length;\n    const ratio = compressedSize / originalSize * 100;\n    const stats = [`Original Size: ${formatFileSize(originalSize)}`, `Compressed Size: ${formatFileSize(compressedSize)}`, `Compression Ratio: ${ratio.toFixed(2)}% of original size`, ratio < 100 ? `Space Saved: ${(100 - ratio).toFixed(2)}%` : 'No space saved'].join('\\n');\n    setCompressionStats(stats);\n    setHeaderList(headerList);\n    return {\n      compressedData: finalData,\n      headerList,\n      stats\n    };\n  };\n\n  // Handle file decompression\n  const decompressFile = async fileData => {\n    let position = 0;\n    const extLength = fileData[position++];\n    let extension = '';\n    for (let i = 0; i < extLength; i++) {\n      extension += String.fromCharCode(fileData[position++]);\n    }\n    const treeByteCount = fileData[position++] << 8 | fileData[position++];\n    let treeBits = '';\n    for (let i = 0; i < treeByteCount; i++) {\n      let byte = fileData[position++].toString(2);\n      while (byte.length < 8) byte = '0' + byte;\n      treeBits += byte;\n    }\n    const leafCount = fileData[position++] << 8 | fileData[position++];\n    const leafValues = [];\n    for (let i = 0; i < leafCount; i++) {\n      leafValues.push(fileData[position++]);\n    }\n    let leafIndex = 0;\n    const buildTree = () => {\n      if (treeBits[0] === '1') {\n        treeBits = treeBits.substring(1);\n        return new HeapEntry(leafValues[leafIndex++], 0);\n      } else {\n        treeBits = treeBits.substring(1);\n        const node = new HeapEntry(0, 0);\n        node.left = buildTree();\n        node.right = buildTree();\n        return node;\n      }\n    };\n    const root = buildTree();\n    const decompressedData = [];\n    let currentBits = '';\n    for (let i = position; i < fileData.length - 1; i++) {\n      let binary = fileData[i].toString(2);\n      while (binary.length < 8) {\n        binary = '0' + binary;\n      }\n      currentBits += binary;\n      while (currentBits.length >= 8) {\n        let node = root;\n        let bitsUsed = 0;\n        while (!node.isLeaf() && bitsUsed < currentBits.length) {\n          if (currentBits[bitsUsed] === '0') {\n            node = node.left;\n          } else {\n            node = node.right;\n          }\n          bitsUsed++;\n        }\n        if (node.isLeaf()) {\n          decompressedData.push(node.ascii);\n          currentBits = currentBits.substring(bitsUsed);\n        } else {\n          break;\n        }\n      }\n    }\n    if (fileData.length > position) {\n      const lastByte = fileData[fileData.length - 2];\n      const lastLength = fileData[fileData.length - 1];\n      let binary = lastByte.toString(2);\n      while (binary.length < lastLength) {\n        binary = '0' + binary;\n      }\n      currentBits += binary;\n      while (currentBits.length > 0) {\n        let node = root;\n        let bitsUsed = 0;\n        while (!node.isLeaf() && bitsUsed < currentBits.length) {\n          if (currentBits[bitsUsed] === '0') {\n            node = node.left;\n          } else {\n            node = node.right;\n          }\n          bitsUsed++;\n        }\n        if (node.isLeaf()) {\n          decompressedData.push(node.ascii);\n          currentBits = currentBits.substring(bitsUsed);\n        } else {\n          break;\n        }\n      }\n    }\n    return {\n      decompressedData: new Uint8Array(decompressedData),\n      extension\n    };\n  };\n\n  // Handle file selection\n  const handleFileChange = e => {\n    if (e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      setFile(selectedFile);\n      setFileSize(selectedFile.size);\n      setOutputMessage(`Selected file: ${selectedFile.name} (${formatFileSize(selectedFile.size)})`);\n      setHuffmanTable([]);\n      setCompressionStats(\"\");\n    }\n  };\n\n  // Compress the selected file\n  const handleCompression = async () => {\n    if (!file) {\n      setOutputMessage(\"Please select a file first\");\n      return;\n    }\n    setOutputMessage(`Compressing file (${formatFileSize(file.size)})...`);\n    setIsCompressing(true);\n    try {\n      const fileData = new Uint8Array(await file.arrayBuffer());\n      const {\n        table,\n        root\n      } = await createHuffmanTree(fileData);\n      setHuffmanTable(table);\n      const {\n        compressedData,\n        stats\n      } = await compressFile(fileData, table, root);\n      const fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n      const blob = new Blob([compressedData], {\n        type: 'application/octet-stream'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${fileName}.huf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      setOutputMessage(`Compression complete! File saved as ${fileName}.huf (${formatFileSize(compressedData.length)})`);\n      setCompressionStats(stats);\n    } catch (error) {\n      console.error(\"Compression error:\", error);\n      setOutputMessage(`Error during compression: ${error.message}`);\n    } finally {\n      setIsCompressing(false);\n    }\n  };\n\n  // Decompress the selected file\n  const handleDecompression = async () => {\n    if (!file) {\n      setOutputMessage(\"Please select a file first\");\n      return;\n    }\n    if (!file.name.endsWith('.huf')) {\n      setOutputMessage(\"Please select a .huf file for decompression\");\n      return;\n    }\n    setOutputMessage(`Decompressing file (${formatFileSize(file.size)})...`);\n    setIsDecompressing(true);\n    try {\n      const fileData = new Uint8Array(await file.arrayBuffer());\n      const {\n        decompressedData,\n        extension\n      } = await decompressFile(fileData);\n      const fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n      const blob = new Blob([decompressedData], {\n        type: 'application/octet-stream'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${fileName}_decompressed.${extension}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      setOutputMessage(`Decompression complete! File saved as ${fileName}_decompressed.${extension} (${formatFileSize(decompressedData.length)})`);\n    } catch (error) {\n      console.error(\"Decompression error:\", error);\n      setOutputMessage(`Error during decompression: ${error.message}`);\n    } finally {\n      setIsDecompressing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Huffman File Compression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subtitle\",\n          children: \"Compress and decompress files using Huffman coding algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-processor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"input-label\",\n            children: \"Select File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileChange,\n            className: \"file-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-info\",\n            children: [\"Selected: \", file.name, \" (\", formatFileSize(fileSize), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCompression,\n              disabled: !file || isCompressing,\n              className: \"action-button compress-button\",\n              children: isCompressing ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Compressing...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Compress File\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDecompression,\n              disabled: !file || isDecompressing || !(file !== null && file !== void 0 && (_file$name = file.name) !== null && _file$name !== void 0 && _file$name.endsWith('.huf')),\n              className: \"action-button decompress-button\",\n              children: isDecompressing ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Decompressing...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Download, {\n                  size: 18,\n                  className: \"button-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 604,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Decompress File\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this), outputMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-box\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: outputMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this), compressionStats && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compression-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"stats-title\",\n            children: [/*#__PURE__*/_jsxDEV(BarChart2, {\n              size: 20,\n              className: \"stats-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 21\n            }, this), \"Compression Statistics\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowHeaderModal(true),\n            className: \"view-header-button\",\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              size: 16,\n              className: \"button-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 21\n            }, this), \"View Header Info\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: compressionStats\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 15\n      }, this), huffmanTable.filter(entry => entry !== null).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"huffman-table-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: [/*#__PURE__*/_jsxDEV(FileText, {\n            size: 20,\n            className: \"section-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 19\n          }, this), \"Huffman Encoding Table\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HuffmanTable, {\n          table: huffmanTable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HeaderInfoModal, {\n      headerList: headerList,\n      isOpen: showHeaderModal,\n      onClose: () => setShowHeaderModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 555,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"v8fcijlHC36UkRW6POhhQiQYMNU=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"HuffmanTable\");\n$RefreshReg$(_c2, \"HeaderInfoModal\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FileText","Upload","Download","BarChart2","List","jsxDEV","_jsxDEV","Fragment","_Fragment","unsignedToBytes","a","HeapEntry","constructor","ascii","repetition","left","right","isLeaf","compareTo","other","Huffman","huffman","length","MinHeap","size","tableSize","currentSize","heapTable","Array","fill","add","newEntry","console","log","swim","removeMin","isEmpty","min","exchange","sink","getMin","getSize","clear","k","firstArgIsLess","Math","floor","j","k1","k2","temp","HuffmanTable","table","filteredTable","filter","entry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","String","fromCharCode","_c","HeaderInfoModal","headerList","isOpen","onClose","item","onClick","_c2","formatFileSize","bytes","formattedBytes","toLocaleString","kb","mb","App","_s","_file$name","file","setFile","fileSize","setFileSize","outputMessage","setOutputMessage","huffmanTable","setHuffmanTable","compressionStats","setCompressionStats","setHeaderList","showHeaderModal","setShowHeaderModal","isCompressing","setIsCompressing","isDecompressing","setIsDecompressing","document","title","createHuffmanTree","fileData","frequencyArray","i","byteValue","heap","z","b","root","traversal","node","code","compressFile","listBinary","finalList","createHeader","push","name","fileExt","substring","lastIndexOf","charCodeAt","treeBits","join","treeByteCount","byte","substr","parseInt","compressedBits","value","paddingBits","repeat","compressedBytes","finalData","Uint8Array","originalSize","compressedSize","ratio","stats","toFixed","compressedData","decompressFile","position","extLength","extension","toString","leafCount","leafValues","leafIndex","buildTree","decompressedData","currentBits","binary","bitsUsed","lastByte","lastLength","handleFileChange","e","target","files","selectedFile","handleCompression","arrayBuffer","blob","Blob","type","url","window","URL","createObjectURL","createElement","href","download","body","appendChild","click","removeChild","error","message","handleDecompression","endsWith","onChange","disabled","_c3","$RefreshReg$"],"sources":["C:/Users/methan/WebstormProjects/Compressing-using-Huffman/src/huffman/App.jsx"],"sourcesContent":["import React, { useState ,useEffect } from 'react';\r\nimport { FileText, Upload, Download, BarChart2, List } from 'lucide-react';\r\nimport './App.css';\r\n\r\n// Utility function to convert unsigned byte to integer\r\nconst unsignedToBytes = (a) => {\r\n  return a & 0xFF;\r\n};\r\n\r\n// Huffman node class\r\nclass HeapEntry {\r\n  constructor(ascii = 0, repetition = 0) {\r\n    this.ascii = ascii;\r\n    this.repetition = repetition;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n\r\n  isLeaf() {\r\n    return this.left === null && this.right === null;\r\n  }\r\n\r\n  compareTo(other) {\r\n    return this.repetition - other.repetition;\r\n  }\r\n}\r\n\r\n// Huffman code class for table\r\nclass Huffman {\r\n  constructor(ascii = 0, huffman = \"\", repetition = 0, length = 0) {\r\n    this.ascii = ascii;\r\n    this.huffman = huffman;\r\n    this.repetition = repetition;\r\n    this.length = length;\r\n  }\r\n}\r\n\r\n// MinHeap implementation\r\nclass MinHeap {\r\n  constructor(size) {\r\n    this.tableSize = size + 1;\r\n    this.currentSize = 0;\r\n    this.heapTable = new Array(this.tableSize).fill(null);\r\n  }\r\n\r\n  add(newEntry) {\r\n    if (this.tableSize - this.currentSize === 1) {\r\n      console.log(\"Heap is full\");\r\n      return false;\r\n    }\r\n    this.currentSize++;\r\n    this.heapTable[this.currentSize] = newEntry;\r\n    this.swim(this.currentSize);\r\n    return true;\r\n  }\r\n\r\n  removeMin() {\r\n    if (!this.isEmpty()) {\r\n      const min = this.heapTable[1];\r\n      this.exchange(1, this.currentSize);\r\n      this.currentSize--;\r\n      this.sink(1);\r\n      this.heapTable[this.currentSize + 1] = null;\r\n      return min;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getMin() {\r\n    if (!this.isEmpty()) {\r\n      return this.heapTable[1];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.currentSize === 0;\r\n  }\r\n\r\n  getSize() {\r\n    return this.currentSize;\r\n  }\r\n\r\n  clear() {\r\n    this.currentSize = 0;\r\n  }\r\n\r\n  swim(k) {\r\n    while (k > 1 && !this.firstArgIsLess(Math.floor(k / 2), k)) {\r\n      this.exchange(Math.floor(k / 2), k);\r\n      k = Math.floor(k / 2);\r\n    }\r\n  }\r\n\r\n  sink(k) {\r\n    while (2 * k <= this.currentSize) {\r\n      let j = 2 * k;\r\n      if (j < this.currentSize && !this.firstArgIsLess(j, j + 1)) {\r\n        j++;\r\n      }\r\n      if (this.firstArgIsLess(k, j)) {\r\n        break;\r\n      }\r\n      this.exchange(k, j);\r\n      k = j;\r\n    }\r\n  }\r\n\r\n  firstArgIsLess(k1, k2) {\r\n    return this.heapTable[k1].compareTo(this.heapTable[k2]) < 0;\r\n  }\r\n\r\n  exchange(k1, k2) {\r\n    const temp = this.heapTable[k1];\r\n    this.heapTable[k1] = this.heapTable[k2];\r\n    this.heapTable[k2] = temp;\r\n  }\r\n}\r\n\r\n// Table component to display huffman codes\r\nconst HuffmanTable = ({ table }) => {\r\n  const filteredTable = table.filter(entry => entry !== null && entry.repetition > 0);\r\n\r\n  return (\r\n      <div className=\"table-container\">\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th>ASCII (Char)</th>\r\n            <th>Huffman Code</th>\r\n            <th>Repetition</th>\r\n            <th>Code Length</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {filteredTable.map((entry, index) => (\r\n              <tr key={index}>\r\n                <td>{entry.ascii} ({String.fromCharCode(entry.ascii)})</td>\r\n                <td className=\"code\">{entry.huffman}</td>\r\n                <td className=\"text-right\">{entry.repetition}</td>\r\n                <td className=\"text-right\">{entry.length}</td>\r\n              </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  );\r\n};\r\n\r\n// Header info modal\r\nconst HeaderInfoModal = ({ headerList, isOpen, onClose }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-content\">\r\n          <h2 className=\"modal-title\">Header Information</h2>\r\n          <div className=\"modal-body\">\r\n            {headerList.length > 0 && (\r\n                <div>\r\n                  <p>Header size: {headerList.length} bytes</p>\r\n                  <ul className=\"header-list\">\r\n                    {headerList.map((item, index) => (\r\n                        <li key={index}>{item}</li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n            )}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n                onClick={onClose}\r\n                className=\"modal-button\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\n// Format file size\r\n/*const formatFileSize = (bytes) => {\r\n  if (bytes < 1024) return `${bytes} bytes`;\r\n  else if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;\r\n  else return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;\r\n};\r\n*/\r\nconst formatFileSize = (bytes) => {\r\n  const formattedBytes = bytes.toLocaleString(); // Add commas for readability\r\n\r\n  if (bytes < 1024) {\r\n    return `${formattedBytes} bytes`;\r\n  } else if (bytes < 1024 * 1024) {\r\n    const kb = Math.floor(bytes / 1024);\r\n    return `${formattedBytes} bytes (${kb} KB)`;\r\n  } else {\r\n    const mb = Math.floor(bytes / (1024 * 1024));\r\n    return `${formattedBytes} bytes (${mb} MB)`;\r\n  }\r\n};\r\n// Main component\r\nconst App = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [fileSize, setFileSize] = useState(0);\r\n  const [outputMessage, setOutputMessage] = useState(\"\");\r\n  const [huffmanTable, setHuffmanTable] = useState([]);\r\n  const [compressionStats, setCompressionStats] = useState(\"\");\r\n  const [headerList, setHeaderList] = useState([]);\r\n  const [showHeaderModal, setShowHeaderModal] = useState(false);\r\n  const [isCompressing, setIsCompressing] = useState(false);\r\n  const [isDecompressing, setIsDecompressing] = useState(false);\r\n  useEffect(() => {\r\n    document.title = \"Huffman Compresser\";\r\n  }, []);\r\n  // Create Huffman tree and codes\r\n  const createHuffmanTree = async (fileData) => {\r\n    const frequencyArray = new Array(256).fill(0);\r\n    for (let i = 0; i < fileData.length; i++) {\r\n      const byteValue = unsignedToBytes(fileData[i]);\r\n      frequencyArray[byteValue]++;\r\n    }\r\n\r\n    const heap = new MinHeap(257);\r\n    let size = 0;\r\n\r\n    for (let i = 0; i < frequencyArray.length; i++) {\r\n      if (frequencyArray[i] !== 0) {\r\n        heap.add(new HeapEntry(i, frequencyArray[i]));\r\n        size++;\r\n      }\r\n    }\r\n\r\n    for (let i = 1; i < size; i++) {\r\n      const z = new HeapEntry();\r\n      const a = heap.removeMin();\r\n      const b = heap.removeMin();\r\n\r\n      z.left = a;\r\n      z.right = b;\r\n      z.repetition = a.repetition + b.repetition;\r\n\r\n      heap.add(z);\r\n    }\r\n\r\n    const root = heap.getMin();\r\n    const table = new Array(256).fill(null);\r\n\r\n    const traversal = (node, code, huffmanTable) => {\r\n      if (!node) return;\r\n\r\n      if (!node.isLeaf()) {\r\n        traversal(node.left, code + '0', huffmanTable);\r\n        traversal(node.right, code + '1', huffmanTable);\r\n      } else {\r\n        huffmanTable[node.ascii] = new Huffman(\r\n            node.ascii,\r\n            code,\r\n            node.repetition,\r\n            code.length\r\n        );\r\n      }\r\n    };\r\n\r\n    traversal(root, \"\", table);\r\n    return { table, root };\r\n  };\r\n\r\n  // Compress file\r\n  const compressFile = async (fileData, huffmanTable, root) => {\r\n    const listBinary = [];\r\n    const finalList = [];\r\n\r\n    const createHeader = (node) => {\r\n      if (!node) return;\r\n\r\n      if (node.isLeaf()) {\r\n        listBinary.push(1);\r\n        finalList.push(node.ascii);\r\n        return;\r\n      }\r\n\r\n      listBinary.push(0);\r\n      createHeader(node.left);\r\n      createHeader(node.right);\r\n    };\r\n\r\n    createHeader(root);\r\n\r\n    const headerList = [];\r\n    const fileName = file.name;\r\n    const fileExt = fileName.substring(fileName.lastIndexOf('.'));\r\n\r\n    headerList.push(fileExt.length);\r\n    for (let i = 0; i < fileExt.length; i++) {\r\n      headerList.push(fileExt.charCodeAt(i));\r\n    }\r\n\r\n    let treeBits = listBinary.join('');\r\n    while (treeBits.length % 8 !== 0) {\r\n      treeBits += '0';\r\n    }\r\n\r\n    const treeByteCount = treeBits.length / 8;\r\n    headerList.push(treeByteCount >> 8, treeByteCount & 0xFF);\r\n\r\n    for (let i = 0; i < treeBits.length; i += 8) {\r\n      const byte = treeBits.substr(i, 8);\r\n      headerList.push(parseInt(byte, 2));\r\n    }\r\n\r\n    headerList.push(finalList.length >> 8, finalList.length & 0xFF);\r\n    headerList.push(...finalList);\r\n\r\n    let compressedBits = '';\r\n    for (let i = 0; i < fileData.length; i++) {\r\n      const value = unsignedToBytes(fileData[i]);\r\n      compressedBits += huffmanTable[value].huffman;\r\n    }\r\n\r\n    const paddingBits = (8 - (compressedBits.length % 8)) % 8;\r\n    compressedBits += '0'.repeat(paddingBits);\r\n\r\n    const compressedBytes = [];\r\n    for (let i = 0; i < compressedBits.length; i += 8) {\r\n      const byte = compressedBits.substr(i, 8);\r\n      compressedBytes.push(parseInt(byte, 2));\r\n    }\r\n\r\n    compressedBytes.push(paddingBits);\r\n\r\n    const finalData = new Uint8Array([...headerList, ...compressedBytes]);\r\n\r\n    const originalSize = fileData.length;\r\n    const compressedSize = finalData.length;\r\n    const ratio = (compressedSize / originalSize) * 100;\r\n\r\n    const stats = [\r\n      `Original Size: ${formatFileSize(originalSize)}`,\r\n      `Compressed Size: ${formatFileSize(compressedSize)}`,\r\n      `Compression Ratio: ${ratio.toFixed(2)}% of original size`,\r\n      ratio < 100 ? `Space Saved: ${(100 - ratio).toFixed(2)}%` : 'No space saved'\r\n    ].join('\\n');\r\n\r\n    setCompressionStats(stats);\r\n    setHeaderList(headerList);\r\n\r\n    return {\r\n      compressedData: finalData,\r\n      headerList,\r\n      stats\r\n    };\r\n  };\r\n\r\n  // Handle file decompression\r\n  const decompressFile = async (fileData) => {\r\n    let position = 0;\r\n\r\n    const extLength = fileData[position++];\r\n    let extension = '';\r\n    for (let i = 0; i < extLength; i++) {\r\n      extension += String.fromCharCode(fileData[position++]);\r\n    }\r\n\r\n    const treeByteCount = (fileData[position++] << 8) | fileData[position++];\r\n    let treeBits = '';\r\n    for (let i = 0; i < treeByteCount; i++) {\r\n      let byte = fileData[position++].toString(2);\r\n      while (byte.length < 8) byte = '0' + byte;\r\n      treeBits += byte;\r\n    }\r\n\r\n    const leafCount = (fileData[position++] << 8) | fileData[position++];\r\n    const leafValues = [];\r\n    for (let i = 0; i < leafCount; i++) {\r\n      leafValues.push(fileData[position++]);\r\n    }\r\n\r\n    let leafIndex = 0;\r\n    const buildTree = () => {\r\n      if (treeBits[0] === '1') {\r\n        treeBits = treeBits.substring(1);\r\n        return new HeapEntry(leafValues[leafIndex++], 0);\r\n      } else {\r\n        treeBits = treeBits.substring(1);\r\n        const node = new HeapEntry(0, 0);\r\n        node.left = buildTree();\r\n        node.right = buildTree();\r\n        return node;\r\n      }\r\n    };\r\n\r\n    const root = buildTree();\r\n\r\n    const decompressedData = [];\r\n    let currentBits = '';\r\n\r\n    for (let i = position; i < fileData.length - 1; i++) {\r\n      let binary = fileData[i].toString(2);\r\n      while (binary.length < 8) {\r\n        binary = '0' + binary;\r\n      }\r\n      currentBits += binary;\r\n\r\n      while (currentBits.length >= 8) {\r\n        let node = root;\r\n        let bitsUsed = 0;\r\n\r\n        while (!node.isLeaf() && bitsUsed < currentBits.length) {\r\n          if (currentBits[bitsUsed] === '0') {\r\n            node = node.left;\r\n          } else {\r\n            node = node.right;\r\n          }\r\n          bitsUsed++;\r\n        }\r\n\r\n        if (node.isLeaf()) {\r\n          decompressedData.push(node.ascii);\r\n          currentBits = currentBits.substring(bitsUsed);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fileData.length > position) {\r\n      const lastByte = fileData[fileData.length - 2];\r\n      const lastLength = fileData[fileData.length - 1];\r\n\r\n      let binary = lastByte.toString(2);\r\n      while (binary.length < lastLength) {\r\n        binary = '0' + binary;\r\n      }\r\n\r\n      currentBits += binary;\r\n\r\n      while (currentBits.length > 0) {\r\n        let node = root;\r\n        let bitsUsed = 0;\r\n\r\n        while (!node.isLeaf() && bitsUsed < currentBits.length) {\r\n          if (currentBits[bitsUsed] === '0') {\r\n            node = node.left;\r\n          } else {\r\n            node = node.right;\r\n          }\r\n          bitsUsed++;\r\n        }\r\n\r\n        if (node.isLeaf()) {\r\n          decompressedData.push(node.ascii);\r\n          currentBits = currentBits.substring(bitsUsed);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      decompressedData: new Uint8Array(decompressedData),\r\n      extension\r\n    };\r\n  };\r\n\r\n  // Handle file selection\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      const selectedFile = e.target.files[0];\r\n      setFile(selectedFile);\r\n      setFileSize(selectedFile.size);\r\n      setOutputMessage(`Selected file: ${selectedFile.name} (${formatFileSize(selectedFile.size)})`);\r\n      setHuffmanTable([]);\r\n      setCompressionStats(\"\");\r\n    }\r\n  };\r\n\r\n  // Compress the selected file\r\n  const handleCompression = async () => {\r\n    if (!file) {\r\n      setOutputMessage(\"Please select a file first\");\r\n      return;\r\n    }\r\n\r\n    setOutputMessage(`Compressing file (${formatFileSize(file.size)})...`);\r\n    setIsCompressing(true);\r\n\r\n    try {\r\n      const fileData = new Uint8Array(await file.arrayBuffer());\r\n      const { table, root } = await createHuffmanTree(fileData);\r\n      setHuffmanTable(table);\r\n\r\n      const { compressedData, stats } = await compressFile(fileData, table, root);\r\n\r\n      const fileName = file.name.substring(0, file.name.lastIndexOf('.'));\r\n      const blob = new Blob([compressedData], { type: 'application/octet-stream' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${fileName}.huf`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n\r\n      setOutputMessage(`Compression complete! File saved as ${fileName}.huf (${formatFileSize(compressedData.length)})`);\r\n      setCompressionStats(stats);\r\n    } catch (error) {\r\n      console.error(\"Compression error:\", error);\r\n      setOutputMessage(`Error during compression: ${error.message}`);\r\n    } finally {\r\n      setIsCompressing(false);\r\n    }\r\n  };\r\n\r\n  // Decompress the selected file\r\n  const handleDecompression = async () => {\r\n    if (!file) {\r\n      setOutputMessage(\"Please select a file first\");\r\n      return;\r\n    }\r\n\r\n    if (!file.name.endsWith('.huf')) {\r\n      setOutputMessage(\"Please select a .huf file for decompression\");\r\n      return;\r\n    }\r\n\r\n    setOutputMessage(`Decompressing file (${formatFileSize(file.size)})...`);\r\n    setIsDecompressing(true);\r\n\r\n    try {\r\n      const fileData = new Uint8Array(await file.arrayBuffer());\r\n      const { decompressedData, extension } = await decompressFile(fileData);\r\n\r\n      const fileName = file.name.substring(0, file.name.lastIndexOf('.'));\r\n      const blob = new Blob([decompressedData], { type: 'application/octet-stream' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${fileName}_decompressed.${extension}`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n\r\n      setOutputMessage(`Decompression complete! File saved as ${fileName}_decompressed.${extension} (${formatFileSize(decompressedData.length)})`);\r\n    } catch (error) {\r\n      console.error(\"Decompression error:\", error);\r\n      setOutputMessage(`Error during decompression: ${error.message}`);\r\n    } finally {\r\n      setIsDecompressing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className=\"app-container\">\r\n        <div className=\"app\">\r\n          <header className=\"app-header\">\r\n            <h1 className=\"title\">Huffman File Compression</h1>\r\n            <p className=\"subtitle\">Compress and decompress files using Huffman coding algorithm</p>\r\n          </header>\r\n\r\n          <div className=\"file-processor\">\r\n            <div className=\"input-group\">\r\n              <label className=\"input-label\">Select File</label>\r\n              <input\r\n                  type=\"file\"\r\n                  onChange={handleFileChange}\r\n                  className=\"file-input\"\r\n              />\r\n              {file && (\r\n                  <div className=\"file-info\">\r\n                    Selected: {file.name} ({formatFileSize(fileSize)})\r\n                  </div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"button-group\">\r\n              <div className=\"button-wrapper\">\r\n                <button\r\n                    onClick={handleCompression}\r\n                    disabled={!file || isCompressing}\r\n                    className=\"action-button compress-button\"\r\n                >\r\n                  {isCompressing ? (\r\n                      <span>Compressing...</span>\r\n                  ) : (\r\n                      <>\r\n                        <span>Compress File</span>\r\n                      </>\r\n                  )}\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"button-wrapper\">\r\n                <button\r\n                    onClick={handleDecompression}\r\n                    disabled={!file || isDecompressing || !file?.name?.endsWith('.huf')}\r\n                    className=\"action-button decompress-button\"\r\n                >\r\n                  {isDecompressing ? (\r\n                      <span>Decompressing...</span>\r\n                  ) : (\r\n                      <>\r\n                        <Download size={18} className=\"button-icon\" />\r\n                        <span>Decompress File</span>\r\n                      </>\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {outputMessage && (\r\n                <div className=\"message-box\">\r\n                  <p>{outputMessage}</p>\r\n                </div>\r\n            )}\r\n          </div>\r\n\r\n          {compressionStats && (\r\n              <div className=\"compression-results\">\r\n                <div className=\"stats-header\">\r\n                  <h2 className=\"stats-title\">\r\n                    <BarChart2 size={20} className=\"stats-icon\" />\r\n                    Compression Statistics\r\n                  </h2>\r\n\r\n                  <button\r\n                      onClick={() => setShowHeaderModal(true)}\r\n                      className=\"view-header-button\"\r\n                  >\r\n                    <List size={16} className=\"button-icon\" />\r\n                    View Header Info\r\n                  </button>\r\n                </div>\r\n\r\n                <div className=\"stats\">\r\n                  <pre>{compressionStats}</pre>\r\n                </div>\r\n              </div>\r\n          )}\r\n\r\n          {huffmanTable.filter(entry => entry !== null).length > 0 && (\r\n              <div className=\"huffman-table-container\">\r\n                <h2 className=\"section-title\">\r\n                  <FileText size={20} className=\"section-icon\" />\r\n                  Huffman Encoding Table\r\n                </h2>\r\n                <HuffmanTable table={huffmanTable} />\r\n              </div>\r\n          )}\r\n        </div>\r\n\r\n        <HeaderInfoModal\r\n            headerList={headerList}\r\n            isOpen={showHeaderModal}\r\n            onClose={() => setShowHeaderModal(false)}\r\n        />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}